%% LyX 2.0.5 created this file.  For more info, see http://www.lyx.org/.
%% Do not edit unless you really know what you are doing.
\documentclass{article}
\usepackage{mathpazo}
\renewcommand{\sfdefault}{lmss}
\renewcommand{\ttdefault}{lmtt}
\usepackage{geometry}
\geometry{verbose,tmargin=3cm,bmargin=3cm,lmargin=3cm,rmargin=3cm}
\usepackage{url}
\usepackage[authoryear]{natbib}
\usepackage[unicode=true,pdfusetitle,
 bookmarks=true,bookmarksnumbered=true,bookmarksopen=true,bookmarksopenlevel=1,
 breaklinks=true,pdfborder={0 0 1},backref=false,colorlinks=false]
 {hyperref}
\hypersetup{
 pdfstartview=FitH}
\usepackage{breakurl}

\makeatletter

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% LyX specific LaTeX commands.
\providecommand{\LyX}{\texorpdfstring%
  {L\kern-.1667em\lower.25em\hbox{Y}\kern-.125emX\@}
  {LyX}}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% User specified LaTeX commands.
%\VignetteIndexEntry{formatR: Format R Code Automatically}

\makeatother

\begin{document}

<<no-comment, include=FALSE>>=
if (require('knitr')) opts_chunk$set(comment=NA)
@


\title{\textbf{formatR}: Format R Code Automatically}


\author{Yihui Xie%
\thanks{Department of Statistics, Iowa State University. Email: \protect\href{mailto:xie@yihui.name}{xie@yihui.name}%
}}

\maketitle
The package \textbf{formatR} \citep{R-formatR} was designed to help
users tidy (reformat) their source code. This vignette serves as a
showcase of the function \emph{tidy.source()}, and a broader introduction
can be found in \url{https://github.com/yihui/formatR/wiki/}.


\section{The workhorse \emph{tidy.source()}}

The main function in this package is \emph{tidy.source()}, which can
take a file as input, parse it and write the formatted code to the
console or a file. 

<<usage-tidy-source,comment='##'>>=
library(formatR)
usage(tidy.source, width = .73)
@

There are six options which can affect the output: \texttt{keep.comment},
\texttt{keep.blank.line}, \texttt{keep.space}, \texttt{reindent.spaces},
\texttt{left.brace.newline} and \texttt{replace.assign}. They are
explained in the help page; see \texttt{?tidy.source}. For example,
if we do not want to keep the blank lines in the code, we can first
specify a global option like this:

<<setup, eval=FALSE>>=
options(keep.blank.line = FALSE)
@

The option \texttt{width} will affect the width of the output, e.g.
we can specify a narrow width:

<<width-spec>>=
options(width = 80)
@

Here are some examples taken from the help page:

<<tidy-source-ex>>=
library(formatR)
## use the 'text' argument
src = c("    ## comments are retained;",
    "# a comment block will be reflowed if it contains long comments;", 
    "#' roxygen comments will not be wrapped in any case",
    "1+1", "if(TRUE){", 
    "x=1  # inline comments", "}else{", "x=2;print('Oh no... ask the right bracket to go away!')}", 
    "1*3 # one space before this comment will become two!", "2+2+2    # 'short comments'", "   ", "lm(y~x1+x2)  ### only 'single quotes' are allowed in comments", 
    "'a character string with \t in it'",
    "1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1  ## comments after a long line", paste("#' here is a", 
        paste(rep("long", 20), collapse = " "), "roxygen comment"))
@


\subsection*{Source code}

<<source-code>>=
cat(src, sep = "\n")
@


\subsection*{Format and replace \texttt{=} with \texttt{\textless{}-}}

<<tidy-replace-assign>>=
tidy.source(text = src[1:8], replace.assign=TRUE)
@


\subsection*{Discard blank lines}

<<blank-lines>>=
## note the 11th line [an empty line] was discarded
tidy.source(text = src, keep.blank.line = FALSE)
@


\subsection*{Reindent code}

<<reindent-spaces>>=
tidy.source(text = src, reindent.spaces = 2)
@


\subsection*{Move left braces \{ to new lines}

<<left-brace-newline>>=
tidy.source(text = src[1:10], left.brace.newline = TRUE)
@


\subsection*{Discard comments}

<<discard-comments>>=
tidy.source(text = src, keep.comment = FALSE)
@


\section{Applications}

This package has been used in a few other R packages. For example,
\textbf{Rd2roxygen} \citep{R-Rd2roxygen} uses \textbf{formatR} to
reformat the code in the \textsf{usage} and \textsf{examples} sections
in Rd files, since the code generated by \textbf{roxygen2} is not
formatted; \textbf{knitr} \citep{R-knitr} can tidy the Sweave code
chunks when the chunk option \texttt{tidy} is \texttt{TRUE} (just
like the code in this vignette).


\section*{About this vignette}

You might be curious about how this vignette was generated, because
it looks different from other Sweave-based vignettes. The answer is
\textbf{knitr} \citep{R-knitr}. The real vignette is in \LyX{}, which
can be found on Github: \url{https://github.com/yihui/formatR/tree/master/inst/doc},
and the Rnw source is here:

<<lyx-doc, eval=FALSE>>=
system.file('doc', 'formatR.Rnw', package='formatR')
@

Instructions on how to use \textbf{knitr} with \LyX{} can be found
at \url{http://yihui.name/knitr/demo/lyx/}.

<<write-bib, include=FALSE>>=
if (require('knitr'))
write_bib(c('Rd2roxygen', 'knitr', 'formatR'), file = 'formatR.bib')
@

\bibliographystyle{jss}
\bibliography{formatR}


\end{document}
