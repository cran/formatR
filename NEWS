		   CHANGES IN formatR VERSION 0.3-2

MINOR CHANGES

  o the parser package is imported (in previous versions formatR
  depends on parser); thanks, Romain Francois


		   CHANGES IN formatR VERSION 0.3-1

SIGNIFICANT CHANGES

  o the function formatR() was renamed to tidy.gui() which is a more
  meaningful name since it is used to create a GUI

NEW FEATURES

  o usage() will tell if the function is S3

  o a wiki is set up as the manual for formatR:
  https://github.com/yihui/formatR/wiki

  o tidy.eval() can evaluate the code in a specified environment now;
  see the 'envir' argument

MINOR CHANGES

  o keep.blank.line is TRUE by default now (was FALSE in previous
  versions), i.e. blank lines are preserved by default


		   CHANGES IN formatR VERSION 0.2-4

NEW FEATURES

  o a new function tidy.eval(): evaluate R code and insert the output
  masked in comments (following ##)

  o the empty lines before 'else' will be removed even if
  keep.blank.line = TRUE; it is ill-advised to use blank lines among
  incomplete code chunks, e.g.

  if (TRUE)

  {'this is a BAD style of R programming'}

  o tidy.source() reports the line number when errors occur, which can
  help users detect the problem in the R code more quickly (thanks,
  Hadley Wickham)


		   CHANGES IN formatR VERSION 0.2-3

NEW FEATURES

  o 'else ...' will be moved back to the last line so that we will no
  longer see an 'else' statement in a new line


		   CHANGES IN formatR VERSION 0.2-2

NEW FEATURES

    o formatR now uses the parser package to parse inline comments,
  which can guarantee that these comments will be correctly parsed (no
  longer uses the 'unsafe' regular expressions to parse comments, so
  forget about the previous rules of writing comments -- just write
  comments with an arbitrary number of spaces before # as you wish)

    o the use of parser also enabled a new feature: '=' can be
  replaced with '<-' wherever appropriate (for example, '=' in
  function arguments will not be replaced; only thoese equal signs
  which are used to assigning purposes can be replaced)

    o long roxygen comments will not be wrapped (i.e. comments begin
  with #' or ##')

MINOR CHANGES

    o fixed a minor problem in the function usage() (out --> output)

    o comments after { will be moved to the next line (in previous
  versions, these comments will cause errors)


		   CHANGES IN formatR VERSION 0.2-1

MINOR CHANGES

    o the escape character '\' in comments of complete lines will be
  successfully preserved, which is especially useful for tidy.source()
  to format the roxygen comments since we usually write comments like
  "##' @author Someone \email{}" but "\e" is not a legal character in
  R (this will lead to errors in earlier versions of this package)


		   CHANGES IN formatR VERSION 0.2-0

NEW FEATURES

    o a new function usage() to print the formatted usage of a function


		   CHANGES IN formatR VERSION 0.1-9

NEW FEATURES

    o tidy.source() can wrap long comments into shorter ones now (this
  only applies to the whole lines of comments; the inline comments
  will not be wrapped since it is tricky to do so)

MINOR CHANGES

    o '\t' will be parsed to ' ' when 'keep.space' is TRUE in
  tidy.source() (this might be undesirable, though)


		   CHANGES IN formatR VERSION 0.1-8

NEW FEATURES

    o new functions parse.tidy() and deparse.tidy() for the package
  pgfSweave to help tidy the source code in Sweave

    o a new function tidy.dir() to format all the R scripts under a
  directory

    o added a package vignette


		   CHANGES IN formatR VERSION 0.1-7

NEW FEATURES

    o full support to multi-byte characters in the formatR() GUI

    o a new function unmask.source() to obtain the real source code
  from the masked source

    o a new operator '%InLiNe_IdEnTiFiEr%' designed mainly for
  pgfSweave (mask the inline comments)


		   CHANGES IN formatR VERSION 0.1-6

NEW FEATURES

    o the inline comments will also be preserved in most cases (in
  earlier versions, only single lines of comments are preserved)

    o tidy.source() gained a new argument 'text' to accept a character
  vector as the source code

    o multi-byte characters are partially supported in the formatR() GUI
  now (full support will come in 0.1-7)

